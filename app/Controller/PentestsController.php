<?php

namespace App\Controller;

use App\Core\Controller;
use App\Core\Form;
use Twig\Error\LoaderError;
use Twig\Error\RuntimeError;
use Twig\Error\SyntaxError;

class PentestsController extends Controller
{
    public function formGenerator(): string
    {
        $scanForm = new Form();
        return $scanForm   ->formStart()
            ->addLabel('addr_ip', 'Enter IP target', ['class' => 'form-label fs-5 my-2 '])
            ->addInput('text', 'addr_ip', 'addr_ip', ['class' => 'form-control', 'placeholder' => 'Enter your Ip target here'])
            ->addButton('submit', 'Start', ['class' => 'btn btn-danger my-3'])
            ->endForm()
            ->create();
    }
    public function index(): void
    {
        $output = '';
        $safeTarget = '';
        if ($_SERVER['REQUEST_METHOD'] === 'POST' && !empty($_POST['target'])) {
            $target = trim($_POST['target']);
            if (filter_var($target, FILTER_VALIDATE_DOMAIN, FILTER_FLAG_HOSTNAME)) {
                $safeTarget = escapeshellarg($target);
                $output = shell_exec("whois $safeTarget 2>&1");
            } else {
                $output = "Domaine invalide.";
            }
        }
        $formRecon = $this->formGenerator();
        $this->twig->display('pentests/index.html.twig', [
            'formRecon' => $formRecon,
            'output' => $output,
            'target' => $safeTarget
        ]);
    }
    /**
     * @throws RuntimeError
     * @throws SyntaxError
     * @throws LoaderError
     */
    public function scan(): void
    {
        $output = null;
        $tableRows = '';
        $target = '';


        if ($_SERVER['REQUEST_METHOD'] === 'POST' && !empty($_POST['addr_ip'])) {
            $target = trim($_POST['addr_ip']);

            // Sécuriser l'entrée : éviter les injections
            if (filter_var($target, FILTER_VALIDATE_IP) || filter_var($target, FILTER_VALIDATE_DOMAIN, FILTER_FLAG_HOSTNAME)) {
                $safeTarget = escapeshellarg($target);
                $output = shell_exec("nmap -Pn $safeTarget 2>&1");

                // Traitement : mettre en <strong> chaque ligne contenant un port
                $lines = explode("\n", $output);
                //$rawOutput = '';
                $portPattern = '/(\d+\/\w+)\s+(open|closed|filtered)\s+(\S+)/';

                foreach ($lines as $line) {
                    //$rawOutput .= htmlspecialchars($line) . "<br>";

                    // Extraire tous les ports/services de la ligne, même s’ils sont tous sur une seule ligne
                    if (preg_match_all($portPattern, $line, $matches, PREG_SET_ORDER)) {
                        foreach ($matches as $match) {
                            $port = htmlspecialchars($match[1]);
                            $state = htmlspecialchars($match[2]);
                            $service = htmlspecialchars($match[3]);

                            $tableRows .= "<tr>
                                                <td><strong>$port</strong></td>
                                                <td>$state</td>
                                                <td>$service</td>
                                            </tr>";
                        }
                    }
                }
            } else {
                $output = "Adresse IP ou domaine invalide.";
            }
        }
        $scanForm = $this->formGenerator();
        $this->twig->display('pentests/scan.html.twig', [
            'scanForm' => $scanForm,
            'scanTable' => $tableRows,
            'target' => $target
        ]);
    }

}